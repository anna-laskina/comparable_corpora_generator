import argparse
import os

from wiki_package import constants
from wiki_package.wiki_web import build_corpus_from_wikipedia

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Wikipedia corpus.")

    parser.add_argument("-n", "--name", type=str, required=False,
                        help="A name to identify several versions of the corpus. Ex. v0_0.")
    parser.add_argument("-l1", "--language_1", type=str, default='en',
                        help="language of the first part of the corpus (ex. 'en', 'fr')")
    parser.add_argument("-l2", "--language_2", type=str, default='fr',
                        help="language of the second part of the corpus (ex. 'en', 'fr')")
    parser.add_argument("-i", "--iteration", type=str, default='12c',
                        help="12с, 1с2, 21c, 2c1, c12, c21 or r (random)")
    parser.add_argument("-ct", "--collect_type", type=str, default='by_type',
                        help="shuffle or by_type")

    parser.add_argument("-var_cat", "--variation_num_cat", type=str, default='10_15_20_25_30',
                        help="list of possible number of categories for each type "
                             "(occurs only in  [language_1], only in [language_2], in both languages)."
                             "Passing numbers through underscore. Ex. '10_20_30'")
    parser.add_argument("-var_cat_1", "--variation_num_cat_in_lang1", type=str,  default='10_15_20_25_30',
                        help="list of possible number of categories which occurs only in  [language_1]."
                             "Ex. '10_20_30'")
    parser.add_argument("-var_cat_2", "--variation_num_cat_in_lang2", type=str, default='10_15_20_25_30',
                        help="list of possible number of categories which occurs only in  [language_2]."
                             "Ex. '10_20_30'")
    parser.add_argument("-var_cat_c", "--variation_num_cat_in_common",  type=str, default='10_15_20_25_30',
                        help="list of possible number of categories which occurs only in both languages."
                             "Ex. '10_20_30'")
    parser.add_argument("-var_size", "--variation_cluster_size", type=str,
                        default='100_250_500_750_1000_1250_1500_2000',
                        help="list of variations of how many pages there should be for each category."
                             "Passing numbers through underscore. Ex. '10_20_30'")
    parser.add_argument("-svar", "--simple_vat_cat", action='store_true',
                        help="Considering only variation_num_cat arg.")

    parser.add_argument("-wiw", "--without_inter_within", action='store_true',
                        help = 'True = not intersections_within_datatyp')
    parser.add_argument("-min_cp", "--min_num_of_cat_on_page", type=int, default=1,
                        help="the minimum number of categories a page can contain.")
    parser.add_argument("-max_cp", "--max_num_of_cat_on_page", type=int, default=100,
                        help="the maximum number of categories a page can contain.")
    parser.add_argument("-min_d", "--min_doc_num_per_cat", type=int, default=2,
                        help="the minimum number of documents categories should contain.")


    parser.add_argument("-init_cat_info", "--initial_category_information",  type=str,
                        default='categories_list_level_2_825.txt',
                        help="See the description of the 'initial_category_type' parameter.")
    parser.add_argument("-init_cat_type", "--initial_category_type", type=str, default='download',
                        help="Possible options:"
                             " \n 'cat2gen': the categories for select will be generated by"
                             "[generate_categories_for_selection] function, and will be subcategories of the categories"
                             "from [initial_categories]. "
                             "The [initial_categories] parameter must be a list of categories."
                             "\n 'cat2choose': the categories for select are the categories from [initial_categories]"
                             " parameter. The [initial_categories] parameter must be a list of categories."
                             "\n 'download': the categories for select will be downloaded from the file. "
                             "The path to the file is specified in the [initial_categories] parameter.")
    parser.add_argument("-map_file", "--map_subcat_to_cat_filename",  type=str,
                        default='map_subcat_to_cat_22->2.txt',
                        help="File name for a file with a dictionary, the keys are the subcategories, and the values"
                             " are the categories to which these subcategories belong.")
    parser.add_argument("-sp", "--save_path",  type=str, default=constants.SAVE_PATH,
                        help="save path")
    parser.add_argument("-spt", "--save_path_tree",  type=str, default=constants.SAVE_TREE_PATH,
                        help="save tree path")



    parser.add_argument("-verbose", "--verbose", action='store_true',
                        help="Provides additional details about creation process.")
    parser.add_argument("-c", "--num_cpu", type=int, default=1,
                        help="Number of CPU which will be used for finding pages.")
    args = parser.parse_args()

    itertion_name = {'1': f'only_{args.language_1}','2': f'only_{args.language_2}', 'c': 'common', 'r': 'random'}
    iteration_list = [itertion_name[s] for s in args.iteration]
    variation_num_cat_list = list(map(int, args.variation_num_cat.split('_')))
    variation_num_cat_list_1 = list(map(int, args.variation_num_cat_in_lang1.split('_')))
    variation_num_cat_list_2 = list(map(int, args.variation_num_cat_in_lang2.split('_')))
    variation_num_cat_list_c = list(map(int, args.variation_num_cat_in_common.split('_')))
    variation_cluster_size_list = list(map(int, args.variation_cluster_size.split('_')))
    if args.simple_vat_cat:
        variation_num_cat_list_1 = None
        variation_num_cat_list_2 = None
        variation_num_cat_list_c = None

    build_corpus_from_wikipedia(
        start_categories_info=os.path.join(args.save_path_tree, args.initial_category_information),
        type_cat_info=args.initial_category_type,
        variation_num_cat=variation_num_cat_list,
        variation_num_cat_lang1=variation_num_cat_list_1,
        variation_num_cat_lang2=variation_num_cat_list_2,
        variation_num_cat_common=variation_num_cat_list_c,
        weights_num_cat=None,
        language_1=args.language_1,
        language_2=args.language_2,
        mapping_of_subcategories_in_main_category= os.path.join(args.save_path_tree, args.map_subcat_to_cat_filename),
        del_none=True,
        excluded_categories=True,
        min_num_of_cat_on_page= args.min_num_of_cat_on_page,
        max_num_of_cat_on_page=args.max_num_of_cat_on_page,
        min_doc_num_per_cat=args.min_doc_num_per_cat,
        variation_cluster_size=variation_cluster_size_list,
        weights_cluster_size=None,
        max_level_for_search_pages=constants.MAX_LEVEL_FOR_SEARCH_PAGES,
        num_cpu=args.num_cpu,
        if_without_intersections_within_datatype= args.without_inter_within,
        iteration=iteration_list,
        if_reversed=False,
        if_display_find_alg=args.verbose,
        collect_type = args.collect_type,
        save_path=args.save_path,
        add_name=args.name
    )
